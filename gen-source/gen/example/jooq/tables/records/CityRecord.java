/**
 * This class is generated by jOOQ
 */
package gen.example.jooq.tables.records;


import ceylon.language.String;

import gen.example.jooq.tables.City;

import java.sql.Timestamp;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record4;
import org.jooq.Row;
import org.jooq.Row4;
import org.jooq.impl.UpdatableRecordImpl;
import org.jooq.types.UShort;


/**
 * This class is generated by jOOQ.
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.6.0"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CityRecord extends UpdatableRecordImpl<CityRecord> implements Record4<UShort, String, UShort, Timestamp> {

	private static final long serialVersionUID = -1861437790;

	/**
	 * Setter for <code>sakila.city.city_id</code>.
	 */
	public void setCityId(UShort value) {
		setValue(0, value);
	}

	/**
	 * Getter for <code>sakila.city.city_id</code>.
	 */
	public UShort getCityId() {
		return (UShort) getValue(0);
	}

	/**
	 * Setter for <code>sakila.city.city</code>.
	 */
	public void setCity(String value) {
		setValue(1, value);
	}

	/**
	 * Getter for <code>sakila.city.city</code>.
	 */
	public String getCity() {
		return (String) getValue(1);
	}

	/**
	 * Setter for <code>sakila.city.country_id</code>.
	 */
	public void setCountryId(UShort value) {
		setValue(2, value);
	}

	/**
	 * Getter for <code>sakila.city.country_id</code>.
	 */
	public UShort getCountryId() {
		return (UShort) getValue(2);
	}

	/**
	 * Setter for <code>sakila.city.last_update</code>.
	 */
	public void setLastUpdate(Timestamp value) {
		setValue(3, value);
	}

	/**
	 * Getter for <code>sakila.city.last_update</code>.
	 */
	public Timestamp getLastUpdate() {
		return (Timestamp) getValue(3);
	}

	// -------------------------------------------------------------------------
	// Primary key information
	// -------------------------------------------------------------------------

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Record1<UShort> key() {
		return (Record1) super.key();
	}

	// -------------------------------------------------------------------------
	// Record4 type implementation
	// -------------------------------------------------------------------------

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Row4<UShort, String, UShort, Timestamp> fieldsRow() {
		return (Row4) super.fieldsRow();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Row4<UShort, String, UShort, Timestamp> valuesRow() {
		return (Row4) super.valuesRow();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<UShort> field1() {
		return City.city.cityId;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<String> field2() {
		return City.city.city_;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<UShort> field3() {
		return City.city.countryId;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<Timestamp> field4() {
		return City.city.lastUpdate;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public UShort value1() {
		return getCityId();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public String value2() {
		return getCity();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public UShort value3() {
		return getCountryId();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Timestamp value4() {
		return getLastUpdate();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public CityRecord value1(UShort value) {
		setCityId(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public CityRecord value2(String value) {
		setCity(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public CityRecord value3(UShort value) {
		setCountryId(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public CityRecord value4(Timestamp value) {
		setLastUpdate(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public CityRecord values(UShort value1, String value2, UShort value3, Timestamp value4) {
		value1(value1);
		value2(value2);
		value3(value3);
		value4(value4);
		return this;
	}

	// -------------------------------------------------------------------------
	// Constructors
	// -------------------------------------------------------------------------

	/**
	 * Create a detached CityRecord
	 */
	public CityRecord() {
		super(City.city);
	}

	/**
	 * Create a detached, initialised CityRecord
	 */
	public CityRecord(UShort cityId, String city, UShort countryId, Timestamp lastUpdate) {
		super(City.city);

		setValue(0, cityId);
		setValue(1, city);
		setValue(2, countryId);
		setValue(3, lastUpdate);
	}
}
