/**
 * This class is generated by jOOQ
 */
package gen.example.jooq.tables;


import ceylon.language.String;

import com.github.bjansen.ceylon.jooqadapter.StringConverter;

import gen.example.jooq.Keys;
import gen.example.jooq.Sakila;
import gen.example.jooq.tables.records.CustomerRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;
import org.jooq.types.UByte;
import org.jooq.types.UShort;


/**
 * This class is generated by jOOQ.
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.6.0"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Customer extends TableImpl<CustomerRecord> {

	private static final long serialVersionUID = 427734012;

	/**
	 * The reference instance of <code>sakila.customer</code>
	 */
	public static final Customer customer = new Customer();

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<CustomerRecord> getRecordType() {
		return CustomerRecord.class;
	}

	/**
	 * The column <code>sakila.customer.customer_id</code>.
	 */
	public final TableField<CustomerRecord, UShort> customerId = createField("customer_id", org.jooq.impl.SQLDataType.SMALLINTUNSIGNED.nullable(false), this, "");

	/**
	 * The column <code>sakila.customer.store_id</code>.
	 */
	public final TableField<CustomerRecord, UByte> storeId = createField("store_id", org.jooq.impl.SQLDataType.TINYINTUNSIGNED.nullable(false), this, "");

	/**
	 * The column <code>sakila.customer.first_name</code>.
	 */
	public final TableField<CustomerRecord, String> firstName = createField("first_name", org.jooq.impl.SQLDataType.VARCHAR.length(45).nullable(false), this, "", new StringConverter());

	/**
	 * The column <code>sakila.customer.last_name</code>.
	 */
	public final TableField<CustomerRecord, String> lastName = createField("last_name", org.jooq.impl.SQLDataType.VARCHAR.length(45).nullable(false), this, "", new StringConverter());

	/**
	 * The column <code>sakila.customer.email</code>.
	 */
	public final TableField<CustomerRecord, String> email = createField("email", org.jooq.impl.SQLDataType.VARCHAR.length(50), this, "", new StringConverter());

	/**
	 * The column <code>sakila.customer.address_id</code>.
	 */
	public final TableField<CustomerRecord, UShort> addressId = createField("address_id", org.jooq.impl.SQLDataType.SMALLINTUNSIGNED.nullable(false), this, "");

	/**
	 * The column <code>sakila.customer.active</code>.
	 */
	public final TableField<CustomerRecord, Byte> active = createField("active", org.jooq.impl.SQLDataType.TINYINT.nullable(false).defaulted(true), this, "");

	/**
	 * The column <code>sakila.customer.create_date</code>.
	 */
	public final TableField<CustomerRecord, Timestamp> createDate = createField("create_date", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

	/**
	 * The column <code>sakila.customer.last_update</code>.
	 */
	public final TableField<CustomerRecord, Timestamp> lastUpdate = createField("last_update", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaulted(true), this, "");

	/**
	 * Create a <code>sakila.customer</code> table reference
	 */
	public Customer() {
		this("customer", null);
	}

	/**
	 * Create an aliased <code>sakila.customer</code> table reference
	 */
	public Customer(java.lang.String alias) {
		this(alias, customer);
	}

	private Customer(java.lang.String alias, Table<CustomerRecord> aliased) {
		this(alias, aliased, null);
	}

	private Customer(java.lang.String alias, Table<CustomerRecord> aliased, Field<?>[] parameters) {
		super(alias, Sakila.sakila, aliased, parameters, "");
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Identity<CustomerRecord, UShort> getIdentity() {
		return Keys.IDENTITY_customer;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public UniqueKey<CustomerRecord> getPrimaryKey() {
		return Keys.keyCustomerPrimary;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<UniqueKey<CustomerRecord>> getKeys() {
		return Arrays.<UniqueKey<CustomerRecord>>asList(Keys.keyCustomerPrimary);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<ForeignKey<CustomerRecord, ?>> getReferences() {
		return Arrays.<ForeignKey<CustomerRecord, ?>>asList(Keys.fkCustomerStore, Keys.fkCustomerAddress);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Customer as(java.lang.String alias) {
		return new Customer(alias, this);
	}

	/**
	 * Rename this table
	 */
	public Customer rename(java.lang.String name) {
		return new Customer(name, null);
	}
}
